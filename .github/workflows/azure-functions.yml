name: Deploy Azure Function (.NET 8 Isolated + Playwright on Linux)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore
        working-directory: ./b-skrap
        run: dotnet restore

      - name: Build (Release)
        working-directory: ./b-skrap
        run: dotnet build --configuration Release --no-restore

      - name: Publish
        working-directory: ./b-skrap
        run: dotnet publish --configuration Release --output ./publish

      # Installera Chromium + deps i publish-mappen (Playwright på Linux)
      - name: Install Playwright (Linux, .NET)
        working-directory: ./b-skrap
        env:
          PLAYWRIGHT_BROWSERS_PATH: ./publish/playwright-browsers
        run: |
          if [ -f "./bin/Release/net8.0/playwright.sh" ]; then
            bash ./bin/Release/net8.0/playwright.sh install --with-deps chromium
          else
            dotnet tool install --global Microsoft.Playwright.CLI
            export PATH="$PATH:$HOME/.dotnet/tools"
            playwright install --with-deps chromium -p "$(pwd)"
          fi

      - name: Inspect publish folder (verify Playwright browsers)
        run: |
          ls -la ./b-skrap/publish || true
          du -sh ./b-skrap/publish/playwright-browsers || true

      # ---- Zip + Deploy via ZipDeploy (utan Kudu) ----
      - name: Create deployment zip
        run: |
          cd ./b-skrap/publish
          # zip -r kräver paketet 'zip' som finns på ubuntu-latest
          zip -r ../package.zip .
          cd -

      - name: Deploy via Zip Deploy (Linux Consumption)
        env:
          APP_NAME: b-skrap
          PUBLISH_PROFILE: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE_LINUX }}
        run: |
          python3 - <<'PY' > creds.out
import os, xml.etree.ElementTree as ET
xml = os.environ['PUBLISH_PROFILE']
root = ET.fromstring(xml)
# Välj en profil för ZipDeploy/WebDeploy (fungerar för publishMethod="ZipDeploy" eller "MSDeploy")
profiles = [p for p in root.findall('.//publishProfile')]
pp = None
for p in profiles:
    m = (p.get('publishMethod') or '').lower()
    if 'zip' in m or 'msdeploy' in m:
        pp = p; break
if pp is None:
    # fallback: ta första
    pp = profiles[0]
print(pp.get('userName') or '')
print(pp.get('userPWD') or '')
PY
          USER=$(sed -n '1p' creds.out)
          PASS=$(sed -n '2p' creds.out)
          if [ -z "$USER" ] || [ -z "$PASS" ]; then
            echo "Could not extract credentials from publish profile"; exit 1
          fi
          echo "Uploading package via ZipDeploy to https://${APP_NAME}.azurewebsites.net/api/zipdeploy ..."
          curl -sS -X POST \
            -u "$USER:$PASS" \
            -H "Content-Type: application/zip" \
            --data-binary @"./b-skrap/package.zip" \
            "https://${APP_NAME}.azurewebsites.net/api/zipdeploy" \
            -w "\nHTTP %{http_code}\n"

